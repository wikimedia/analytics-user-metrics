"""
    The configuration file for the user metrics project.  This module defines
    the project level variables used to tune the execution of user metric
    operations, set the path of resource dependencies, and define the database
    hosts for various projects.

    The init file for the config sub-package stores the details for the logger.


    Project Settings
    ~~~~~~~~~~~~~~~~

    - **__project_home__**          : Home directory for the project
    - **__web_home__**              : Home directory for Flask extension (api)
    - **__data_file_dir__**         : Home directory for any ancillary data
    files
    - **__query_module__**          : Defines the name of the module under
    src/metrics/query that is used to retrieve backend data.
    - **__user_thread_max__**       : Integer that tunes the maximum number of
    threads on which to partition user metric computations based on users.
    - **__rev_thread_max__**        : Integer that tunes the maximum number of
    threads on which to partition user metric computations based on revisions.
    - **__cohort_data_instance__**  : Instance hosting cohort data.
    - **__cohort_db__**             : Database containing cohort data.
    - **__cohort_meta_db__**        : Database storing users with cohort tags.
    - **__cohort_meta_instance__**  : Database containing meta data for
    cohorts.
    - **__secret_key__**            : User session secret key for use with
    flask-login
    - **__flask_login_exists__**    : Option to include flask-login extension


    MediaWiki DB Settings
    ~~~~~~~~~~~~~~~~~~~~~

    Two dictionaries, **connections** which defines connection credentials
    for data stores and **PROJECT_DB_MAP** which defines a mapping from
    project instance to data store.


    SSH Tunnel Parameters
    ~~~~~~~~~~~~~~~~~~~~~

    This data structure stores mappings to parameters for setting up SSH
    tunnels to analytics databases.  This is primarily used for testing
    and consumed by scripts/run_ssh_tunnels.
"""

from user_metrics.config import logging
from pkg_resources import WorkingSet , DistributionNotFound, VersionConflict
from os.path import exists
from urllib2 import urlopen
import json
import os

# Get working set of Python modules
working_set = WorkingSet()


# Project settings
# ================


__instance_host__ = '%project_host%'
#__instance_host__ = '127.0.0.1'

__instance_port__ = int('%app_serve_port%')
#__instance_port__ = 5000

__project_home__ = '%project_home%'
__web_home__ = os.path.join(__project_home__, 'web_interface/')
__data_file_dir__ = os.path.join(__project_home__, 'data/')

__query_module__ = 'user_metrics.query.query_calls_noop'
__user_thread_max__ = 100
__rev_thread_max__ = 50
__time_series_thread_max__ = 6

__cohort_data_instance__    = 'cohorts'
__cohort_db__               = 'usertags'
__cohort_meta_db__          = 'usertags_meta'
__cohort_meta_instance__    = 'staging'

__secret_key__ = 'your secret key - CHANGE THIS'

try:
    working_set.require('Flask-Login>=0.1.2')
    __flask_login_exists__ = True
    logging.debug(__name__ + ' :: Using module flask.ext.login...')
except (DistributionNotFound, VersionConflict):
    __flask_login_exists__ = False
    logging.debug(__name__ + ' :: Can\'t find module flask.ext.login...')


# Database connection settings
# ============================

connections = {
    __cohort_data_instance__: {
        'user': 'xxxx',
        'host': '127.0.0.1',
        'db': 'prod',
        'passwd': 'yyyy',
        'port': 3307},
    's1': {
        'user': 'xxxx',
        'host': '127.0.0.1',
        'db': 'prod',
        'passwd': 'yyyy',
        'port': 3307},
    's5': {
        'user': 'xxxx',
        'host': '127.0.0.1',
        'db': 'prod',
        'passwd': 'yyyy',
        'port': 3307},
}

def get_project_host_map(usecache=True):
    cache_name = 'project_host_map.json'
    if not exists(cache_name) or not usecache:
        cluster_url_fmt = 'http://noc.wikimedia.org/conf/s%d.dblist'
        host_fmt = 's%d'
        project_host_map = {}
        for i in range(1,8):
            host = host_fmt % i
            url = cluster_url_fmt % i
            projects = urlopen(url).read().splitlines()
            for project in projects:
                project_host_map[project] = host
        json.dump(project_host_map, open(cache_name, 'w'))
    else:
        project_host_map = json.load(open(cache_name))
    return project_host_map

PROJECT_DB_MAP = get_project_host_map(usecache=True)

# SSH Tunnel Parameters
# =====================

TUNNEL_DATA = {
    's1': {
        'cluster_host': 'stat1.wikimedia.org',
        'db_host': 's1-analytics-slave.eqiad.wmnet',
        'user': 'xxxx',
        'remote_port': 3306,
        'tunnel_port': 3307
    },
    's2': {
        'cluster_host': 'stat1.wikimedia.org',
        'db_host': 's2-analytics-slave.eqiad.wmnet',
        'user': 'xxxx',
        'remote_port': 3306,
        'tunnel_port': 3308
    }
}
